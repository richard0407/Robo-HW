class Main {
  public static void main(String[] args) {

    public void direct(){
      System.out.println("The drivetrain has stopped.");
    }
    public void direct2(){
      System.out.println("The shooter has stopped.");
    }
  }
}

public interface Command{
  public void init();
  public void execute();
  public boolean isFinished();
  public void end(boolean interrupted);

  public static void main(String[] args){
    RunDrivetrain myCommand = new RunDrivetrain(()->{
      return Math.random();
    });
    while(!myCommand.isFinished()){
      myCommand.execute();
    }
    myCommand.end(false);
    
    Shootball myCommand2 = new Shootball(()->{
      return Math.random();
    });
    while(!myCommand2.isFinished()){
      myCommand2.execute();
    }
    myCommand2.end(false);
  }
}

import java.util.function.Consumer;
import java.util.function.Supplier;

public class RunDrivetrain implements Command{
  public Consumer<Double> runMotor;
  public Supplier<Double> motorPower;

  private int countdown = 10;

  public RunDrivetrain(Supplier<Double> motorPower){
    this.runMotor = (power) -> {
      System.out.println("Set drivetrain to " + power);
    };
    this.motorPower = motorPower;
  }

  @Override
  public void init(){
    this.motorPower.get();
  }
  @Override
  public void execute(){
    this.runMotor.accept(this.motorPower.get());
  }
  @Override
  public boolean isFinished(){
    this.countdown--;
    return this.countdown == 0;
  }
  @Override
  public void end(boolean interrupted){
    this.runMotor.accept(0.0);
  }
}

import java.util.function.Consumer;
import java.util.function.Supplier;

public class Shootball implements Command{
  public Consumer<Double> runMotor;
  public Supplier<Double> motorPower;

  private int countdown = 10;

  public Shootball(Supplier<Double> motorPower){
    this.runMotor = (power) -> {
      System.out.println("Set shooter to " + power);
    };
    this.motorPower = motorPower;
  }

  @Override
  public void init(){
    this.motorPower.get();
  }
  @Override
  public void execute(){
    this.runMotor.accept(this.motorPower.get());
  }
  @Override
  public boolean isFinished(){
    this.countdown--;
    return this.countdown == 0;
  }
  @Override
  public void end(boolean interrupted){
    this.runMotor.accept(0.0);
    System.out.println("The shooter has stopped.");
  }
}
